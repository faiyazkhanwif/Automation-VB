Sub MoveDataFromPatientLog()

    'Create Backup using the backup creation module - module 1
    CreateBackup
    
    On Error GoTo ErrorHandler
    
    Dim sourceSheet As Worksheet
    Dim destinationSheet As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim eligibleColumnIndex As Long
    Dim movedColumnIndex As Long
    
    ' Set source sheet
    Set sourceSheet = ThisWorkbook.Sheets("Patient LOG")
    
    ' Set destination sheet
    Set destinationSheet = ThisWorkbook.Sheets("Screening LOG")
    Set destinationSheetPL = ThisWorkbook.Sheets("Sample LOG")
    
    ' Find the last row in the source sheet
    lastRow = sourceSheet.Cells(sourceSheet.Rows.Count, "H").End(xlUp).Row
    lastRow = lastRow + 1 'To fix missing last row bug
    
    ' Find the column indexes
    eligibleColumnIndex = GetColumnIndex(sourceSheet, "Eligible")
    movedColumnIndex = GetColumnIndex(sourceSheet, "Moved")
    
    ' Check if columns exist
    If eligibleColumnIndex > 0 And movedColumnIndex > 0 Then
    
        ' Disable events temporarily to avoid interference
        Application.EnableEvents = False
        
        ' Loop through each row in the source sheet
        For i = 2 To lastRow ' Assuming the data starts from row 2
            
            ' Check conditions for copying
            If UCase(sourceSheet.Cells(i, eligibleColumnIndex).Value) Like "Y*" And (UCase(sourceSheet.Cells(i, movedColumnIndex).Value) = "N" Or sourceSheet.Cells(i, movedColumnIndex).Value = "") Then
                
                ' Debugging: Print row number
                Debug.Print "Processing row: " & i
                
                Dim emptyRow As Long
                emptyRow = destinationSheet.Cells(destinationSheet.Rows.Count, 3).End(xlUp).Row + 1
                
                ' Find the first empty row
                Do While Application.WorksheetFunction.CountA(destinationSheet.Rows(emptyRow)) > 0
                    emptyRow = emptyRow + 1
                Loop
                
                ' Copy data to destination sheet under the corresponding columns
                ' Add values to the found empty row
                destinationSheet.Cells(emptyRow, 3).Value = GetValueAsString(sourceSheet.Cells(i, 3))
                ' Moving date dd-mmm-yyyy
                ' Check if the cell in the source sheet is a date and not null or empty
                If Not IsEmpty(sourceSheet.Cells(i, 8).Value) And IsDate(sourceSheet.Cells(i, 8).Value) Then
                    ' Convert the date to a string with the desired format
                    Dim formattedDate As String
                    formattedDate = Format(sourceSheet.Cells(i, 8).Value, "dd-mmm-yyyy")
                    
                    ' Set the value in the destination cell to the formatted date
                    destinationSheet.Cells(emptyRow, 4).Value = formattedDate
                Else
                    destinationSheet.Cells(emptyRow, 4).Value = GetValueAsString(sourceSheet.Cells(i, 8))
                End If
                
                destinationSheet.Cells(emptyRow, 5).Value = GetValueAsString(sourceSheet.Cells(i, 9))
                destinationSheet.Cells(emptyRow, 7).Value = GetValueAsString(sourceSheet.Cells(i, 10))
                
            End If
            
            ' Outside if statement
            'Empty row for 2nd Destination
            Dim emptyRowPL As Long
            emptyRowPL = destinationSheetPL.Cells(destinationSheetPL.Rows.Count, 3).End(xlUp).Row + 1
            ' Find the first empty row
            Do While Application.WorksheetFunction.CountA(destinationSheetPL.Rows(emptyRowPL)) > 0
                emptyRowPL = emptyRowPL + 1
            Loop
            ' Copy data to destination sheet PL under the corresponding columns
            ' Add values to the found empty row PL
            destinationSheetPL.Cells(emptyRowPL, 1).Value = GetValueAsString(sourceSheet.Cells(i, 3))
            'destinationSheetPL.Cells(emptyRowPL, 3).Value = GetValueAsString(sourceSheet.Cells(i, 13))
            'destinationSheetPL.Cells(emptyRowPL, 4).Value = GetValueAsString(sourceSheet.Cells(i, 14))
            ' Moving date dd-mmm-yyyy
            ' Check if the cell in the source sheet is a date and not null or empty
            If Not IsEmpty(sourceSheet.Cells(i, 13).Value) And IsDate(sourceSheet.Cells(i, 13).Value) Then
                ' Convert the date to a string with the desired format
                Dim formattedDatePL As String
                formattedDatePL = Format(sourceSheet.Cells(i, 13).Value, "dd-mmm-yyyy")
                
                ' Set the value in the destination cell to the formatted date
                destinationSheetPL.Cells(emptyRowPL, 3).Value = formattedDatePL
            Else
                destinationSheetPL.Cells(emptyRowPL, 3).Value = GetValueAsString(sourceSheet.Cells(i, 13))
            End If
            'Moving time with format
            destinationSheetPL.Cells(emptyRowPL, 4).Value = GetValueAsString(sourceSheet.Cells(i, 14))
            destinationSheetPL.Cells(emptyRowPL, 4).NumberFormat = sourceSheet.Cells(i, 14).NumberFormat
            
            ' Update "Moved" column value to "Y"
            sourceSheet.Cells(i, movedColumnIndex).Value = "Y"
            
        Next i
        
        ' Clean up and re-enable events
        Application.EnableEvents = True
        Set sourceSheet = Nothing
        Set destinationSheet = Nothing
        Set destinationSheetPL = Nothing
        
        MsgBox "Data has been successfully moved from Patient LOG to Screening LOG and Sample LOG."
    
    Else
        MsgBox "One or more required columns are missing.", vbExclamation
    End If
    
    Exit Sub

ErrorHandler:
    ' Debugging: Print the error message
    MsgBox "An error occurred: " & Err.Description, vbExclamation
    
    ' Clean up and re-enable events
    Application.EnableEvents = True
    Set sourceSheet = Nothing
    Set destinationSheet = Nothing
    Exit Sub
End Sub

Function GetValueAsString(cell As Range) As String
    If Not IsEmpty(cell.Value) Then
        GetValueAsString = CStr(cell.Value)
    Else
        GetValueAsString = ""
    End If
End Function

Function GetColumnIndex(sheet As Worksheet, columnName As String) As Long
    On Error Resume Next
    GetColumnIndex = sheet.Rows(1).Find(columnName, LookIn:=xlValues, LookAt:=xlWhole).Column
    On Error GoTo 0
End Function





