Sub MoveDataFromWorkingLog()

    'Create Backup - custom as custom name needed
    Dim backupFolder As String
    Dim backupPath As String
    Dim backupFileName As String
    
    ' Define the backup folder name
    backupFolder = "Backup"
    
    ' Check if the backup folder exists, if not, create it
    If Len(Dir(ThisWorkbook.Path & "\" & backupFolder, vbDirectory)) = 0 Then
        MkDir ThisWorkbook.Path & "\" & backupFolder
    End If
    
    ' Define the backup file name using the current date and time
    backupFileName = Format(Now, "yyyymmdd_hhmmss") & "_WR" & ".xlsm"
    
    ' Create the full backup path
    backupPath = ThisWorkbook.Path & "\" & backupFolder & "\" & backupFileName
    
    ' Save a copy of the workbook to the backup path
    ThisWorkbook.SaveCopyAs backupPath
    
    ' Display a message indicating that the backup is created
    MsgBox "Backup created successfully: " & backupPath, vbInformation
    
    On Error GoTo ErrorHandler
    
    Dim sourceSheet As Worksheet
    Dim destinationSheet As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim scheduledColumnIndex As Long
    Dim movedColumnIndex As Long
    
    ' Set source sheet
    Set sourceSheet = ThisWorkbook.Sheets("Working LOG")
    
    ' Set destination sheet
    Set destinationSheet = ThisWorkbook.Sheets("Participant LOG")
    Set destinationSheetSL = ThisWorkbook.Sheets("Subject ID LOG")

    'Find the last row with data in any column(20240310)
    lastRow = sourceSheet.Cells.Find(What:="*", _
                After:=sourceSheet.Cells(1, 1), _
                LookAt:=xlPart, _
                LookIn:=xlFormulas, _
                SearchOrder:=xlByRows, _
                SearchDirection:=xlPrevious, _
                MatchCase:=False).Row
    lastRow = lastRow + 1 'To fix missing last row bug
    
    ' Find the column indexes
    scheduledColumnIndex = GetColumnIndex(sourceSheet, "Scheduled(Y/N)")
    movedColumnIndex = GetColumnIndex(sourceSheet, "Moved")
    
    ' Check if columns exist
    If scheduledColumnIndex > 0 And movedColumnIndex > 0 Then
    
        ' Disable events temporarily to avoid interference
        Application.EnableEvents = False
        
        ' Loop through each row in the source sheet
        For i = 2 To lastRow ' Assuming the data starts from row 2
            
            ' Check conditions for copying
            If UCase(sourceSheet.Cells(i, scheduledColumnIndex).Value) Like "Y*" And (UCase(sourceSheet.Cells(i, movedColumnIndex).Value) = "N" Or sourceSheet.Cells(i, movedColumnIndex).Value = "") Then
                
                ' Debugging: Print row number
                Debug.Print "Processing row: " & i
                
                ' Debugging: Print values before copying
                'Debug.Print "MRN: " & sourceSheet.Cells(i, 5).Value 'MRN is in column E which has index 5. So Cells(i, 5)
                'Debug.Print "Last Name: " & sourceSheet.Cells(i, 6).Value
                ' Add similar lines for other columns
                
                '-------------------------Participant LOG--------------------------
                
                'Empty row for Participant LOG
                Dim emptyRow As Long
                emptyRow = destinationSheet.Cells(destinationSheet.Rows.Count, 3).End(xlUp).Row + 1
                
                ' Find the first empty row
                Do While Application.WorksheetFunction.CountA(destinationSheet.Rows(emptyRow)) > 0
                    emptyRow = emptyRow + 1
                Loop
                
                ' Copy data to destination sheet under the corresponding columns
                ' Add values to the found empty row
                destinationSheet.Cells(emptyRow, 2).Value = GetValueAsString(sourceSheet.Cells(i, 1))
                destinationSheet.Cells(emptyRow, 4).Value = GetValueAsString(sourceSheet.Cells(i, 2))
                destinationSheet.Cells(emptyRow, 5).Value = GetValueAsString(sourceSheet.Cells(i, 3))
                destinationSheet.Cells(emptyRow, 6).Value = GetValueAsString(sourceSheet.Cells(i, 4))
                destinationSheet.Cells(emptyRow, 7).Value = GetValueAsString(sourceSheet.Cells(i, 20)) ' Column T (20rd column)
                ' Moving date dd-mmm-yyyy
                ' Check if the cell in the source sheet is a date and not null or empty
                If Not IsEmpty(sourceSheet.Cells(i, 21).Value) And IsDate(sourceSheet.Cells(i, 21).Value) Then
                    ' Convert the date to a string with the desired format
                    Dim formattedDate As String
                    formattedDate = Format(sourceSheet.Cells(i, 21).Value, "dd-mmm-yyyy")
                    ' Set the value in the destination cell to the formatted date
                    destinationSheet.Cells(emptyRow, 8).Value = formattedDate
                End If
                'destinationSheet.Cells(emptyRow, 8).Value = GetValueAsString(sourceSheet.Cells(i, 21)) ' Column U (21th column)
                'Moving time with format
                destinationSheet.Cells(emptyRow, 9).Value = GetValueAsString(sourceSheet.Cells(i, 22))
                destinationSheet.Cells(emptyRow, 9).NumberFormat = sourceSheet.Cells(i, 22).NumberFormat
                'destinationSheet.Cells(emptyRow, 9).Value = GetValueAsString(sourceSheet.Cells(i, 22)) ' Column V (25th column)
                destinationSheet.Cells(emptyRow, 10).Value = GetValueAsString(sourceSheet.Cells(i, 23)) ' Column W (26th column)

                '-------------------------Subject ID LOG--------------------------
                
                'Empty row for Subject ID LOG
                Dim emptyRowSL As Long
                emptyRowSL = destinationSheetSL.Cells(destinationSheetSL.Rows.Count, 3).End(xlUp).Row + 1
                ' Find the first empty row
                Do While Application.WorksheetFunction.CountA(destinationSheetSL.Rows(emptyRowSL)) > 0
                    emptyRowSL = emptyRowSL + 1
                Loop
                
                destinationSheetSL.Cells(emptyRowSL, 2).Value = GetValueAsString(sourceSheet.Cells(i, 2))
                destinationSheetSL.Cells(emptyRowSL, 3).Value = GetValueAsString(sourceSheet.Cells(i, 3))
                destinationSheetSL.Cells(emptyRowSL, 4).Value = GetValueAsString(sourceSheet.Cells(i, 4))
                destinationSheetSL.Cells(emptyRowSL, 5).Value = GetValueAsString(sourceSheet.Cells(i, 8))
                destinationSheetSL.Cells(emptyRowSL, 6).Value = GetValueAsString(sourceSheet.Cells(i, 9))
                destinationSheetSL.Cells(emptyRowSL, 7).Value = GetValueAsString(sourceSheet.Cells(i, 10))
                destinationSheetSL.Cells(emptyRowSL, 8).Value = GetValueAsString(sourceSheet.Cells(i, 11))
                destinationSheetSL.Cells(emptyRowSL, 9).Value = GetValueAsString(sourceSheet.Cells(i, 12))
                destinationSheetSL.Cells(emptyRowSL, 10).Value = GetValueAsString(sourceSheet.Cells(i, 13))
                'destinationSheetSL.Cells(emptyRowSL, 11).Value = GetValueAsString(sourceSheet.Cells(i, 14))
                'destinationSheetSL.Cells(emptyRowSL, 12).Value = GetValueAsString(sourceSheet.Cells(i, 15))
                'destinationSheetSL.Cells(emptyRowSL, 13).Value = GetValueAsString(sourceSheet.Cells(i, 16))
                'destinationSheetSL.Cells(emptyRowSL, 14).Value = GetValueAsString(sourceSheet.Cells(i, 17))
                'destinationSheetSL.Cells(emptyRowSL, 11).Value = GetValueAsString(sourceSheet.Cells(i, 14)) & ", " & _
                                                                  GetValueAsString(sourceSheet.Cells(i, 15)) & ", " & _
                                                                  GetValueAsString(sourceSheet.Cells(i, 17)) & ", " & _
                                                                  GetValueAsString(sourceSheet.Cells(i, 16))
                destinationSheetSL.Cells(emptyRowSL, 11).Value = GetValueAsString(sourceSheet.Cells(i, 14))

                ' Add similar lines for other columns
                
                ' Update "Moved" column value to "Y"
                sourceSheet.Cells(i, movedColumnIndex).Value = "Y"
                
            End If
        Next i
        
        ' Clean up and re-enable events
        Application.EnableEvents = True
        Set sourceSheet = Nothing
        Set destinationSheet = Nothing
        Set destinationSheetSL = Nothing
        
        MsgBox "Data has been successfully moved from Working LOG to Participant LOG and Subject ID LOG."
    
    Else
        MsgBox "One or more required columns are missing.", vbExclamation
    End If
    
    Exit Sub

ErrorHandler:
    ' Debugging: Print the error message
    MsgBox "An error occurred: " & Err.Description, vbExclamation
    
    ' Clean up and re-enable events
    Application.EnableEvents = True
    Set sourceSheet = Nothing
    Set destinationSheet = Nothing
    Set destinationSheetSL = Nothing
    Exit Sub
End Sub

Function GetValueAsString(cell As Range) As String
    If Not IsEmpty(cell.Value) Then
        GetValueAsString = CStr(cell.Value)
    Else
        GetValueAsString = ""
    End If
End Function

Function GetColumnIndex(sheet As Worksheet, columnName As String) As Long
    On Error Resume Next
    GetColumnIndex = sheet.Rows(1).Find(columnName, LookIn:=xlValues, LookAt:=xlWhole).Column
    On Error GoTo 0
End Function







